{\rtf1\ansi\deff0\adeflang1025
{\fonttbl{\f0\froman\fprq2\fcharset0 Times New Roman;}{\f1\froman\fprq2\fcharset2 Symbol;}{\f2\fswiss\fprq2\fcharset0 Arial;}{\f3\fnil\fprq2\fcharset0 Microsoft YaHei;}{\f4\fnil\fprq2\fcharset0 Arial;}{\f5\fswiss\fprq0\fcharset128 Arial;}}
{\colortbl;\red0\green0\blue0;\red128\green128\blue128;}
{\stylesheet{\s0\snext0\nowidctlpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf0\hich\af6\langfe2052\dbch\af4\afs24\lang1081\loch\f0\fs24\lang1033 Default;}
{\s15\sbasedon0\snext16\sb240\sa120\keepn\hich\af3\dbch\af4\afs28\loch\f2\fs28 Heading;}
{\s16\sbasedon0\snext16\sb0\sa120 Text body;}
{\s17\sbasedon16\snext17\sb0\sa120\dbch\af5 List;}
{\s18\sbasedon0\snext18\sb120\sa120\noline\i\dbch\af5\afs24\ai\fs24 Caption;}
{\s19\sbasedon0\snext19\noline\dbch\af5 Index;}
}{\info{\creatim\yr0\mo0\dy0\hr0\min0}{\revtim\yr0\mo0\dy0\hr0\min0}{\printim\yr0\mo0\dy0\hr0\min0}{\comment OpenOffice}{\vern4130}}\deftab709

{\*\pgdsctbl
{\pgdsc0\pgdscuse195\pgwsxn12240\pghsxn15840\marglsxn1134\margrsxn1134\margtsxn1134\margbsxn1134\pgdscnxt0 Default;}}
\formshade\paperh15840\paperw12240\margl1134\margr1134\margt1134\margb1134\sectd\sbknone\sectunlocked1\pgndec\pgwsxn12240\pghsxn15840\marglsxn1134\margrsxn1134\margtsxn1134\margbsxn1134\ftnbj\ftnstart1\ftnrstcont\ftnnar\aenddoc\aftnrstcont\aftnstart1\aftnnrlc
\pgndec\pard\plain \s0\nowidctlpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf0\hich\af6\langfe2052\dbch\af4\afs24\lang1081\loch\f0\fs24\lang1033{\rtlch \ltrch\loch
*As a note \'96 examples should be customized for their audience if possible.  I wrote this for me, and I have a background in Physics, so it helped to think on a basic physical level.}
\par \pard\plain \s0\nowidctlpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf0\hich\af6\langfe2052\dbch\af4\afs24\lang1081\loch\f0\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s0\nowidctlpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf0\hich\af6\langfe2052\dbch\af4\afs24\lang1081\loch\f0\fs24\lang1033{\rtlch \ltrch\loch
\tab The Three Pillars of Object Oriented Programming are Inheritance, Encapsulation, and Polymorphism.  The reason these are considered pillars is because they define the relationships objects may have with each other and provide a structure forms those relationships.  Even when you think about objects out in real life, at least our perceptions of them, these pillars can be seen.}
\par \pard\plain \s0\nowidctlpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf0\hich\af6\langfe2052\dbch\af4\afs24\lang1081\loch\f0\fs24\lang1033{\rtlch \ltrch\loch
\tab Looking at these pillars in the real world, we have to not look at the physical item itself so much as how we as humans have analyzed and categorized them.  For example, take a lump of iron and a lump of aluminum.  We know they are both metals and share some properties, but there isn't a material simply called \'93metal\'94 out there from which they are both derived.  We created that category based on materials with physical similarities based on a definition we humans \'96 at first intuitively, then later more scientifically \'96  defined.  And yet, when we describe things we will often generalize these objects into such a category.}
\par \pard\plain \s0\nowidctlpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf0\hich\af6\langfe2052\dbch\af4\afs24\lang1081\loch\f0\fs24\lang1033{\rtlch \ltrch\loch
\tab Despite there being no physical link between these metals, we can think of them as both inheriting the properties that we have defined as being metal.  That's the commonality.  Then there are of course differences.  The differences would be things like hardness, density, melting point, and other specific characteristics of each metal that may vary.  So metal is like an Interface or an Abstract class, promising certain traits be present.  Iron and aluminum are like distinct classes that implement metal.}
\par \pard\plain \s0\nowidctlpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf0\hich\af6\langfe2052\dbch\af4\afs24\lang1081\loch\f0\fs24\lang1033{\rtlch \ltrch\loch
\tab Now let's look at the Polymorphism of metal.  In the real world, of course, there's no such thing as a datatype, but we can think of some things that are similar.  For example, when comparing a mop made with a wooden handle and one made with an aluminum handle most people wouldn't stop to consider which kind of wood or which kind of metal the handle is made from.  In this case, our CompareMops subroutine in our head only cares about the base class, into which either iron or aluminum or any other metal could be substituted.  Our aluminum hasn't physically changed, of course, but it is mentally not being used as aluminum and hence polymorphed in our minds.  Polymorphism is essentially a \'93it'll do\'94 relationship in our minds.  If it fits into our broad category, it'll do.  We do this very intuitively all the time, but computers have to be told precisely how to handle categorizing and passing things into those categories, hence the fancy word to describe something you otherwise would never have lent a single thought to!}
\par \pard\plain \s0\nowidctlpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf0\hich\af6\langfe2052\dbch\af4\afs24\lang1081\loch\f0\fs24\lang1033{\rtlch \ltrch\loch
\tab The final pillar is Encapsulation, which is essentially protecting a class from being modified when used by other classes.  Think of our metals in a very physical sense.  If you heat it up, bang it with a hammer, change it's shape, and make our aluminum mop handle into an aluminum mop sword, the metal is still aluminum.  Now let's say you take a chemical process and take our aluminum sword and make it into a mess of hydrogen, oxygen and chlorine (which is what happens slowly through oxidization or rusting).  Did you change the characteristics of aluminum?  Nope!  Aluminum is still aluminum, and what we have is aluminum no longer.  The essence of what aluminum is is encapsulated in our definition of aluminum, which is a specific state of electrons, protons, and neutrons.  If you were to think of aluminum in programming terms, it might have properties like volume and shape which other methods may operate on (although this would more likely be in a sub-class), but the features which make it aluminum are protected so that its definition will never change.  So we must both think about properties, states, and how they may change when we define a class to know how best to encapsulate them such that they are always the thing they were intended to be.}
\par \pard\plain \s0\nowidctlpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf0\hich\af6\langfe2052\dbch\af4\afs24\lang1081\loch\f0\fs24\lang1033{\rtlch \ltrch\loch
\tab As we create our classes and programs, we must remember that the Three Pillars of OOP are there to guide us, and if we think about how we think about real items, we should be able to appropriately design stable classes and software. }
\par }